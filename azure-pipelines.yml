# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

pr:
- main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  RUNTIME: 'win-x64'
  BRANCH: $[variables['Build.SourceBranchName']]
  APPNAME: $[split(variables['Build.Repository.Name'], '/')[1]]
  PUBLISH_PATH: '.\publish\'
  OUTPUT_PATH: '.\installer\'
  YEAR: $[format('{0:yyyy}', pipeline.startTime)]

steps:
- checkout: self
  clean: true
  persistCredentials: true
  fetchDepth: 0
  fetchTags: true
  lfs: true
  submodules: 'recursive'

- script: |
    git config user.name "Azure Pipeline"
    git config user.email "ado@ktsu.io"
    git fetch --all
    git branch -D $(BRANCH) || true
    git switch $(BRANCH)
  displayName: Configure git

- task: PowerShell@2
  displayName: Init Vars
  inputs:
    targetType: 'inline'
    script: |
      if(!(Test-Path VERSION -PathType Leaf)) { New-Item -Path . -Name "VERSION" -ItemType "file" -Value "1.0.0.alpha.1"}
      $VERSION = Get-Content -Path VERSION -Raw
      if($VERSION) { $VERSION = $VERSION.Trim() } else { $VERSION = "" }
      Write-Host "##vso[task.setvariable variable=VERSION;]$VERSION"

      if(!(Test-Path RELEASES -PathType Leaf)) { New-Item -Path . -Name "RELEASES" -ItemType "file" }
      Get-Content -Path RELEASES | ForEach-Object {
        if($_) {

          Write-Host "##vso[task.setvariable variable=$_" -NoNewline
          Write-Host "_RELEASED;]true"
        }
      }

      $INSTALLER_VERSION = $VERSION.Split('-')[0]
      Write-Host "##vso[task.setvariable variable=INSTALLER_VERSION;]$INSTALLER_VERSION"

      if(!(Test-Path DESCRIPTION -PathType Leaf)) { New-Item -Path . -Name "DESCRIPTION" -ItemType "file" -Value "$(APPNAME)"}
      $DESCRIPTION = Get-Content -Path DESCRIPTION -Raw
      if($DESCRIPTION) { $DESCRIPTION = $DESCRIPTION.Trim() } else { $DESCRIPTION = "" }
      Write-Host "##vso[task.setvariable variable=DESCRIPTION;]$DESCRIPTION"

      if(!(Test-Path AUTHORS -PathType Leaf)) { New-Item -Path . -Name "AUTHORS" -ItemType "file" }
      $AUTHORS = Get-Content -Path AUTHORS -Raw
      if($AUTHORS) { $AUTHORS = $AUTHORS.Trim() } else { $AUTHORS = "" }
      Write-Host "##vso[task.setvariable variable=AUTHORS;]$AUTHORS"

      $AUTHORS_KEY = $AUTHORS.Replace('.', '-')
      Write-Host "##vso[task.setvariable variable=AUTHORS_KEY;]$AUTHORS_KEY"

- task: PowerShell@2
  displayName: Make release name
  inputs:
    targetType: 'inline'
    script: Write-Host "##vso[task.setvariable variable=RELEASE_NAME;]$(VERSION)-$(RUNTIME)"

- task: PowerShell@2
  displayName: Append branch to release name
  condition: not(eq(variables['BRANCH'], 'main'))
  inputs:
    targetType: 'inline'
    script: Write-Host "##vso[task.setvariable variable=RELEASE_NAME;]$(RELEASE_NAME)-$(BRANCH)"

- task: PowerShell@2
  displayName: Make release key
  inputs:
    targetType: 'inline'
    script: |
      $RELEASE_KEY = "$(RELEASE_NAME)".Replace('.', '_').Replace('-', '_')
      Write-Host "##vso[task.setvariable variable=RELEASE_KEY;]$RELEASE_KEY"

- task: PowerShell@2
  displayName: Test if current version has already been released
  condition: not(eq(variables['$(RELEASE_KEY)_RELEASED'], 'true'))
  inputs:
    targetType: 'inline'
    script: Write-Host "##vso[task.setvariable variable=SHOULD_RELEASE;]true"

- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    useGlobalJson: true

- script: dotnet tool update dotnet-script --global
  displayName: Install dotnet-script

- script: dotnet tool update dotnet-coverage --global
  displayName: Install dotnet-coverage

- script: dotnet tool update dotnet-sonarscanner --global
  displayName: Install dotnet-sonarscanner

- script: dotnet restore --nologo --verbosity normal --runtime $(RUNTIME)
  displayName: Restore
- task: SonarCloudPrepare@2
  inputs:
    SonarCloud: 'SonarCloud'
    organization: '$(AUTHORS_KEY)'
    scannerMode: 'MSBuild'
    projectKey: '$(AUTHORS_KEY)_$(APPNAME)'
    projectName: '$(APPNAME)'
    projectVersion: '$(VERSION)'

- script: dotnet build --nologo --verbosity normal --no-restore --no-incremental --configuration $(buildConfiguration) --runtime $(RUNTIME)
  displayName: Build

- script: dotnet-coverage collect "dotnet test --nologo --verbosity normal --no-build" -f xml -o "coverage.xml"
  displayName: Test

- task: SonarCloudAnalyze@2
  inputs:
    jdkversion: 'JAVA_HOME_17_X64'

- script: dotnet publish $(APPNAME)/$(APPNAME).csproj --nologo --verbosity normal --no-build --self-contained --configuration $(buildConfiguration) --runtime $(RUNTIME) --framework net8.0 --output $(PUBLISH_PATH)
  displayName: Publish

- script: mkdir -p $(OUTPUT_PATH)
  displayName: Create installer directory

- script: >
    makensis
    /NOCD
    /v4
    /DNAME=$(APPNAME)
    /DINSTALLER_NAME=$(APPNAME)-$(RELEASE_NAME).exe
    /DAUTHORS="$(AUTHORS)"
    /DVERSION=$(INSTALLER_VERSION).0
    /DDESCRIPTION="$(DESCRIPTION)"
    /DLICENSE=LICENSE
    /DCOPYRIGHT="$(AUTHORS) Â© $(YEAR)"
    /DYEAR=$(YEAR)
    /DMAIN_APP_EXE=$(AUTHORS).$(APPNAME).exe
    /DWEB_SITE=$(Build.Repository.Uri)
    /DPUBLISH_PATH=$(PUBLISH_PATH)
    /DOUTPUT_PATH=$(OUTPUT_PATH)
    setup.nsi
  displayName: Create Installer
  
- task: GitHubReleasePublish@1
  condition: eq(variables['SHOULD_RELEASE'], 'true')
  continueOnError: true
  inputs:
    githubEndpoint: 'GitHub - matt-edmondson'
    manuallySetRepository: true
    githubOwner: '$(AUTHORS_KEY)'
    githubRepositoryName: '$(APPNAME)'
    githubTag: '$(RELEASE_NAME)'
    githubReleaseTitle: '$(RELEASE_NAME)'
    githubReleaseDraft: false
    githubReleasePrerelease: false
    githubIgnoreAssets: false
    githubReleaseAsset: '$(OUTPUT_PATH)\$(APPNAME)-$(RELEASE_NAME).exe'
    githubReuseRelease: false
    githubReuseDraftOnly: false
    githubSkipDuplicatedAssets: true
    githubEditRelease: true
    githubDeleteEmptyTag: false
    githubTargetCommitsh: '$(Build.SourceVersion)'

- task: PowerShell@2
  displayName: Update release keys
  condition: eq(variables['SHOULD_RELEASE'], 'true')
  inputs:
    targetType: 'inline'
    script: |
      Add-Content -Path ".\RELEASES" -Value "$(RELEASE_KEY)"

- script: |
    git add RELEASES
    git commit -m "[skip ci] Add $(RELEASE_KEY) to RELEASES"
    git push
  condition: eq(variables['SHOULD_RELEASE'], 'true')
  displayName: Commit updated release keys

- task: SonarCloudPublish@2
  continueOnError: true
  inputs:
    pollingTimeoutSec: '300'