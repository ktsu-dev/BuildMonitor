# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

pr:
- main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  RUNTIME: 'win-x64'
  FRAMEWORK: 'net8.0'
  BRANCH: $(Build.SourceBranchName)
  APPNAME: $[ split(variables['Build.Repository.Name'], '/')[1] ]
  PUBLISH_PATH: '$(Build.StagingDirectory)\publish'

steps:
- task: PowerShell@2
  displayName: Init Vars
  inputs:
    targetType: 'inline'
    script: |
      $VERSION = Get-Content -Path VERSION -Raw
      $VERSION = $VERSION.Trim()
      Write-Host "##vso[task.setvariable variable=VERSION;]$VERSION"

      $INSTALLER_VERSION = $VERSION.Split('-')[0]
      Write-Host "##vso[task.setvariable variable=INSTALLER_VERSION;]$INSTALLER_VERSION"

      $DESCRIPTION = Get-Content -Path DESCRIPTION -Raw
      $DESCRIPTION = $DESCRIPTION.Trim()
      Write-Host "##vso[task.setvariable variable=DESCRIPTION;]$DESCRIPTION"

      $AUTHORS = Get-Content -Path AUTHORS -Raw
      $AUTHORS = $AUTHORS.Trim()
      Write-Host "##vso[task.setvariable variable=AUTHORS;]$AUTHORS"

      $YEAR = Get-Date -Format "yyyy"
      Write-Host "##vso[task.setvariable variable=YEAR;]$YEAR"

- task: PowerShell@2
  displayName: Make installer name if main branch
  condition: eq(variables['Build.SourceBranchName'], 'main')
  inputs:
    targetType: 'inline'
    script: Write-Host "##vso[task.setvariable variable=INSTALLER_NAME;]$(APPNAME)-$(VERSION)-$(RUNTIME).exe"

- task: PowerShell@2
  displayName: Make installer name if not main branch
  condition: not(eq(variables['Build.SourceBranchName'], 'main'))
  inputs:
    targetType: 'inline'
    script: Write-Host "##vso[task.setvariable variable=INSTALLER_NAME;]$(APPNAME)-$(BRANCH)-$(VERSION)-$(RUNTIME).exe"

- script: dotnet tool update dotnet-script --global
  displayName: Install dotnet-script

- script: dotnet tool update dotnet-coverage --global
  displayName: Install dotnet-coverage

- script: dotnet tool update dotnet-sonarscanner --global
  displayName: Install dotnet-sonarscanner

- script: dotnet restore --nologo --verbosity normal --runtime $(RUNTIME)
  displayName: Restore

- script: dotnet build --nologo --verbosity normal --no-restore --no-incremental --configuration $(buildConfiguration) --runtime $(RUNTIME) --framework $(FRAMEWORK)
  displayName: Build

- script: dotnet-coverage collect "dotnet test --nologo --verbosity normal --no-build" -f xml -o "coverage.xml"
  displayName: Test

- script: dotnet publish $(APPNAME)/$(APPNAME).csproj --nologo --verbosity normal --no-build --self-contained --configuration $(buildConfiguration) --runtime $(RUNTIME) --framework $(FRAMEWORK) --output $(PUBLISH_PATH)
  displayName: Publish

- script: >
    makensis
    /DNAME="$(APPNAME)"
    /DINSTALLER_NAME="$(INSTALLER_NAME)"
    /DPLATFORM="$(AUTHORS)"
    /DAUTHORS="$(AUTHORS)"
    /DVERSION="$(INSTALLER_VERSION).0"
    /DDESCRIPTION="$(DESCRIPTION)"
    /DLICENSE="LICENSE"
    /DCOPYRIGHT="$(AUTHORS) Â© $(YEAR)"
    /DYEAR="$(YEAR)"
    /DMAIN_APP_EXE="$(AUTHORS).$(APPNAME).exe"
    /DWEB_SITE="$(Build.Repository.Uri)"
    /DPUBLISH_PATH="$(PUBLISH_PATH)"
    setup.nsi
  displayName: Create Installer
  