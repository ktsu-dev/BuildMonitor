# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

pr:
- main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  runtime: 'win-x64'
  framework: 'net8.0'

steps:
- displayName: Read Vars
  task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      $VERSION = Get-Content -Path VERSION -Raw
      $VERSION = $VERSION.Trim()
      Write-Host "##vso[task.setvariable variable=VERSION;]$VERSION"

      $DESCRIPTION = Get-Content -Path DESCRIPTION -Raw
      $DESCRIPTION = $DESCRIPTION.Trim()
      Write-Host "##vso[task.setvariable variable=DESCRIPTION;]$DESCRIPTION"

      $AUTHORS = Get-Content -Path AUTHORS -Raw
      $AUTHORS = $AUTHORS.Trim()
      Write-Host "##vso[task.setvariable variable=AUTHORS;]$AUTHORS"
      
      $LICENSE = Get-Content -Path LICENSE -Raw
      $LICENSE = $LICENSE.Trim()
      Write-Host "##vso[task.setvariable variable=LICENSE;]$LICENSE"

      $YEAR = Get-Date -Format "yyyy"
      Write-Host "##vso[task.setvariable variable=YEAR;]$YEAR"

- displayName: Install dotnet-script
  script: dotnet tool update dotnet-script --global

- displayName: Install dotnet-coverage
  script: dotnet tool update dotnet-coverage --global

- displayName: Install dotnet-sonarscanner
  script: dotnet tool update dotnet-sonarscanner --global

- displayName: Restore
  script: dotnet restore --nologo --verbosity normal --runtime $(runtime)

- displayName: Build
  script: dotnet build --nologo --verbosity normal --no-restore --no-incremental --configuration $(buildConfiguration) --runtime $(runtime) --framework $(framework)

- displayName: Test
  script: dotnet-coverage collect "dotnet test --nologo --verbosity normal --no-build" -f xml -o "coverage.xml"

- displayName: Publish
  script: dotnet publish $(Build.Repository.Name)/$(Build.Repository.Name).csproj --nologo --verbosity normal --no-build --self-contained --configuration $(buildConfiguration) --runtime $(runtime) --framework $(framework) --output ./publish

- displayName: Create Installer
  script: >
    makensis
    /DNAME="$(Build.Repository.Name)"
    /DINSTALLERNAME="setup-$(Build.Repository.Name)-$(VERSION)-$(Build.SourceBranchName)-$(runtime).exe"
    /DPLATFORM="$(AUTHORS)"
    /DAUTHORS="$(AUTHORS)"
    /DVERSION="$(VERSION)"
    /DDESCRIPTION="$(DESCRIPTION)"
    /DLICENSE="$(LICENSE)"
    /DCOPYRIGHT="$(AUTHORS) Â© $(YEAR)"
    /DYEAR="$(YEAR)"
    /DMAIN_APP_EXE="$(AUTHORS).$(Build.Repository.Name).exe"
    /DWEB_SITE="$(Build.Repository.Uri)"
    /DPUBLISH_PATH="$(Build.Repository.LocalPath)/publish"
    setup.nsi
  